{"version":3,"sources":["components/heading/heading.js","components/list/list.js","components/logo-list/logo-list.js","components/timeline/timeline.js","components/button/button.js","components/contact/contact.js","components/page/page.js","App.js","serviceWorker.js","index.js"],"names":["Heading","props","title","headingLevel","safeHeading","toLowerCase","Title","includes","className","List","listItems","items","map","item","url","href","target","LogoList","logoListItems","alt","src","img","Timeline","jobs","job","dates","company","descs","Button","primary","type","backgroundColor","label","mode","join","defaultProps","size","onClick","undefined","Contact","description","ctaItems","ctas","cta","Page","data","contact","logo_items","project_items","mng_skill_items","tech_skill_items","thought_items","App","args","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.eff91220.chunk.js","sourcesContent":["import React from \"react\";\r\n// import { ReactComponent as SVG } from '../../assets/test1.svg';\r\nimport PropTypes from \"prop-types\";\r\nimport \"./heading.scss\";\r\n\r\nexport const Heading = (props) => {\r\n  const { title, headingLevel } = props;\r\n  const validHeadingLevels = [\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"];\r\n\r\n  const safeHeading = headingLevel ? headingLevel.toLowerCase() : \"\";\r\n  const Title = validHeadingLevels.includes(safeHeading) ? safeHeading : \"p\";\r\n\r\n  return (\r\n    <>\r\n      <div className=\"heading__container\">\r\n        {/* <SVG/> */}\r\n        <Title className=\"heading\">{title}</Title>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nHeading.propTypes = {\r\n  title: PropTypes.string,\r\n  heading: PropTypes.string,\r\n};\r\n","import React from \"react\";\r\nimport \"./list.scss\";\r\n\r\nexport const List = (props) => {\r\n  const { items } = props;\r\n  const listItems = items.map((item) => (\r\n    <li>\r\n      {item.url ? (\r\n        <a href={`${item.url}`} target=\"_blank\">{item.title}</a>\r\n      ) : (\r\n        <span>{item.title}</span>\r\n      )}\r\n    </li>\r\n  ));\r\n  return <ul className=\"list\">{listItems}</ul>;\r\n};\r\n","import React from \"react\";\r\nimport \"./logo-list.scss\";\r\n\r\nexport const LogoList = (props) => {\r\n  const { items } = props;\r\n  const logoListItems = items.map((item) => (\r\n    <li className=\"logo-list-item\">\r\n      {item.url ? (\r\n        <a href={`${item.url}`} target=\"_blank\">\r\n          <img alt={`${item.title}`} src={`${item.img}`}/>\r\n        </a>\r\n      ) : (\r\n        <img alt={`${item.title}`} src={`${item.img}`}/>\r\n      )}\r\n    </li>\r\n  ));\r\n  return <ul className=\"logo-list\">{logoListItems}</ul>;\r\n};\r\n","import React from \"react\";\r\nimport \"./timeline.scss\";\r\nimport { List } from \"../list/list\";\r\n\r\nexport const Timeline = (props) => {\r\n  const { jobs } = props;\r\n  const listItems = jobs.map((job) => (\r\n    <li className=\"timeline-item\">\r\n      <div className=\"timeline-marker\"></div>\r\n      <div className=\"timeline-content\">\r\n        <h3 className=\"timeline-title\">{job.title}</h3>\r\n        <div className=\"timeline-info\">\r\n          <span>{job.dates}</span>\r\n        </div>\r\n        <h3 className=\"timeline-company\">{job.company}</h3>\r\n        {job.descs && <List items={job.descs} />}\r\n      </div>\r\n    </li>\r\n  ));\r\n  return (\r\n    <ul className=\"timeline\">\r\n      <span> {listItems} </span>\r\n    </ul>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./button.scss\";\r\n\r\nexport const Button = ({ primary, backgroundColor, type, label, ...props }) => {\r\n  const mode = primary ? \"button--primary\" : \"button--secondary\";\r\n  return (\r\n    <button\r\n      type=\"button\"\r\n      className={[\"button\", `button--${type}`, mode].join(\" \")}\r\n      {...props}\r\n    >\r\n      {label}\r\n    </button>\r\n  );\r\n};\r\n\r\nButton.propTypes = {\r\n  primary: PropTypes.bool,\r\n  backgroundColor: PropTypes.string,\r\n  size: PropTypes.oneOf([\"small\", \"medium\", \"large\"]),\r\n  label: PropTypes.string.isRequired,\r\n  onClick: PropTypes.func,\r\n};\r\n\r\nButton.defaultProps = {\r\n  backgroundColor: null,\r\n  primary: false,\r\n  size: \"medium\",\r\n  onClick: undefined,\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./contact.scss\";\r\nimport { Button } from \"../button/button\";\r\n\r\nexport const Contact = (props) => {\r\n  const { description, ctas } = props;\r\n  const ctaItems = ctas.map((cta) => (\r\n    <>\r\n      {cta.url ? (\r\n        <a className={[\"button\", `button--${cta.type}`].join(\" \")} target=\"_blank\" href={`${cta.url}`}>{cta.title}</a>\r\n      ) : (\r\n        <Button label={cta.title} />\r\n      )}\r\n    </>\r\n  ));\r\n  return (\r\n    <div className=\"contact\">\r\n      <div className=\"contact__item\">\r\n        <h1 className=\"contact__heading\"> Madeline Jensen </h1>\r\n        {/* <Heading title={\"Madeline Jensen\"} headingLevel={\"h1\"} /> */}\r\n      </div>\r\n      <div className=\"contact__item\">\r\n        <div className=\"contact__description\">\r\n          <p> {description} </p>\r\n        </div>\r\n        <div className=\"contact__ctas\">\r\n          {ctaItems}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nContact.propTypes = {\r\n  image: PropTypes.string.isRequired\r\n};\r\n","import React from \"react\";\r\nimport data from \"./data.json\";\r\nimport \"./page.scss\";\r\nimport { Heading } from \"../heading/heading\";\r\nimport { List } from \"../list/list\";\r\nimport { LogoList } from \"../logo-list/logo-list\";\r\nimport { Timeline } from \"../timeline/timeline\";\r\nimport { Contact } from \"../contact/contact\";\r\n\r\nexport const Page = () => (\r\n  <>\r\n    <div className=\"page-layout\">\r\n      <div className=\"page-layout__column page-layout__column--1\">\r\n        <Contact\r\n          description={data.contact.description}\r\n          ctas={data.contact.ctas}\r\n        />\r\n      </div>\r\n      <div className=\"page-layout__column page-layout__column--2\">\r\n        <Heading\r\n          title=\"Experience\"\r\n          headingLevel=\"h2\"\r\n        />\r\n        <Timeline jobs={data.jobs} />\r\n        <Heading\r\n          title=\"A few organizations I've worked with\"\r\n          headingLevel=\"h2\"\r\n        />\r\n        <LogoList items={data.logo_items} />\r\n        <Heading\r\n          title=\"A few projects I've worked on\"\r\n          headingLevel=\"h2\"\r\n        />\r\n        <List items={data.project_items} />\r\n        <Heading\r\n          title=\"A mix of management + tech skills\"\r\n          headingLevel=\"h2\"\r\n        />\r\n        <Heading\r\n          title=\"Management\"\r\n          headingLevel=\"h3\"\r\n        />\r\n        <List items={data.mng_skill_items} />\r\n        <Heading\r\n          title=\"Technology\"\r\n          headingLevel=\"h3\"\r\n        />\r\n        <List items={data.tech_skill_items} />\r\n        <Heading\r\n          title=\"Contributions + Thought Leadership\"\r\n          headingLevel=\"h2\"\r\n        />\r\n        <span className=\"thought-list\">\r\n          <List items={data.thought_items} />\r\n        </span>\r\n      </div>\r\n    </div>\r\n  </>\r\n);\r\n","import React from 'react';\r\nimport './style.scss';\r\nimport { Page } from './components/page/page';\r\n\r\nfunction App(args) {\r\n  return (\r\n    <Page {...args} />\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}