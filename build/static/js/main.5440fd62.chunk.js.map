{"version":3,"sources":["components/heading/heading.js","components/list/list.js","components/timeline/timeline.js","components/button/button.js","components/contact/contact.js","components/page/page.js","App.js","serviceWorker.js","index.js"],"names":["Heading","props","title","headingLevel","safeHeading","toLowerCase","Title","includes","className","List","listItems","items","map","item","url","href","Timeline","jobs","job","class","dates","company","description","Button","primary","type","backgroundColor","label","mode","join","defaultProps","size","onClick","undefined","Contact","ctaItems","ctas","cta","target","Page","data","contact","heading","project_items","heading_exp","heading_skills","skill_items","heading_thought","thought_items","App","args","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5440fd62.chunk.js","sourcesContent":["import React from \"react\";\n// import { ReactComponent as SVG } from '../../assets/test1.svg';\nimport PropTypes from \"prop-types\";\nimport \"./heading.scss\";\n\nexport const Heading = (props) => {\n  const { title, headingLevel } = props;\n  const validHeadingLevels = [\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"];\n\n  const safeHeading = headingLevel ? headingLevel.toLowerCase() : \"\";\n  const Title = validHeadingLevels.includes(safeHeading) ? safeHeading : \"p\";\n\n  return (\n    <>\n      <div className=\"heading__container\">\n        {/* <SVG/> */}\n        <Title className=\"heading\">{title}</Title>\n      </div>\n    </>\n  );\n};\n\nHeading.propTypes = {\n  title: PropTypes.string,\n  heading: PropTypes.string,\n};\n","import React from \"react\";\nimport \"./list.scss\";\n\nexport const List = (props) => {\n  const { items } = props;\n  const listItems = items.map((item) => (\n    <li>\n      {item.url ? (\n        <a href={`${item.url}`}>{item.title}</a>\n      ) : (\n        <span>{item.title}</span>\n      )}\n    </li>\n  ));\n  return <ul className=\"list\">{listItems}</ul>;\n};\n","import React from \"react\";\nimport \"./timeline.scss\";\n\nexport const Timeline = (props) => {\n  const { jobs } = props;\n  const listItems = jobs.map((job) => (\n    <li class=\"timeline-item\">\n      <div class=\"timeline-info\">\n        <span>{job.dates}</span>\n      </div>\n      <div class=\"timeline-marker\"></div>\n      <div class=\"timeline-content\">\n        <h3 class=\"timeline-title\">{job.title}</h3>\n        <h3 class=\"timeline-company\">{job.company}</h3>\n        <p>{job.description}</p>\n      </div>\n    </li>\n  ));\n  return (\n    <ul class=\"timeline\">\n      <span> {listItems} </span>\n    </ul>\n  );\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./button.scss\";\n\nexport const Button = ({ primary, backgroundColor, type, label, ...props }) => {\n  const mode = primary ? \"button--primary\" : \"button--secondary\";\n  return (\n    <button\n      type=\"button\"\n      className={[\"button\", `button--${type}`, mode].join(\" \")}\n      {...props}\n    >\n      {label}\n    </button>\n  );\n};\n\nButton.propTypes = {\n  primary: PropTypes.bool,\n  backgroundColor: PropTypes.string,\n  size: PropTypes.oneOf([\"small\", \"medium\", \"large\"]),\n  label: PropTypes.string.isRequired,\n  onClick: PropTypes.func,\n};\n\nButton.defaultProps = {\n  backgroundColor: null,\n  primary: false,\n  size: \"medium\",\n  onClick: undefined,\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./contact.scss\";\nimport { Heading } from \"../heading/heading\";\nimport { Button } from \"../button/button\";\n\nexport const Contact = (props) => {\n  const { description, ctas } = props;\n  const ctaItems = ctas.map((cta) => (\n    <>\n      {cta.url ? (\n        <a className={[\"button\", `button--${cta.type}`].join(\" \")} target=\"_blank\" href={`${cta.url}`}>{cta.title}</a>\n      ) : (\n        <Button label={cta.title} />\n      )}\n    </>\n  ));\n  return (\n    <div class=\"contact\">\n      <div class=\"contact__item\">\n        <div className=\"contact__initials\">\n          mj\n        </div>\n        <h1 className=\"contact__heading\"> Madeline Jensen </h1>\n        {/* <Heading title={\"Madeline Jensen\"} headingLevel={\"h1\"} /> */}\n      </div>\n      <div class=\"contact__item\">\n        <div className=\"contact__description\">\n          <p> {description} </p>\n        </div>\n        <div class=\"contact__ctas\">\n          { ctaItems }\n        </div>\n      </div>\n    </div>\n  );\n};\n\nContact.propTypes = {\n  image: PropTypes.string.isRequired\n};\n","import React from \"react\";\nimport data from \"./data.json\";\nimport \"./page.scss\";\nimport { Heading } from \"../heading/heading\";\nimport { BodyText } from \"../body-text/body-text\";\nimport { List } from \"../list/list\";\nimport { CTAlist } from \"../cta-list/cta-list\";\nimport { Timeline } from \"../timeline/timeline\";\nimport { Contact } from \"../contact/contact\";\n\nexport const Page = () => (\n  <>\n    <div className=\"page-layout\">\n      <div className=\"page-layout__column page-layout__column--1\">\n\n        <Contact \n          description={data.contact.description} \n          ctas={data.contact.ctas}\n        />\n      </div>\n      <div className=\"page-layout__column page-layout__column--2\">\n        <Heading\n          title={data.heading.title}\n          headingLevel={data.heading.headingLevel}\n        />\n        <List items={data.project_items} />\n        <Heading\n        title={data.heading_exp.title}\n        headingLevel={data.heading_exp.headingLevel}\n      />\n      <Timeline jobs={data.jobs} />\n      <Heading\n        title={data.heading_skills.title}\n        headingLevel={data.heading_skills.headingLevel}\n      />\n      <List items={data.skill_items} />\n      <Heading\n        title={data.heading_thought.title}\n        headingLevel={data.heading_thought.headingLevel}\n      />\n      <List items={data.thought_items} />\n      </div>\n    </div>\n  </>\n);\n","import React from 'react';\nimport './style.scss';\nimport { Page } from './components/page/page';\n\nfunction App(args) {\n  return (\n    <Page {...args} />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}